if year(dtab1)
dtab1
year(dtab1)
year(mdy_hm(dtab1$date))
mdy_hm(dtab1$date)
cladd9mdy_hm(dtab1$date)[1])
class(mdy_hm(dtab1$date)[1])
dtab1<-dtab1 %>%  mutate(date = mdy_hm(date))
dtab1
occDates<-function(dtab1, dateScale){
require(lubridate)
d<-lapply(dtab1$date, mdy_hm)
d.df <- tbl_df(cbind(lapply(d, year), lapply(d, month), lapply(d, day)))
colnames(d.df) <- c("year", "month", "day")
if (dateScale == "year"){
return(unique(dplyr::select(d.df, year)))
}
if (dateScale == "month"){
return(unique(dplyr::select(d.df, year, month)))
}
if (dateScale == "day"){
return(unique(dplyr::select(d.df, year, month, day)))
}
}
uniDates<-occDates(dtab1, dateScale = "year")
uniDates
d.df <- dtab1 %>% lapply(dtab1$date, mdy_hm) %>% tbl_df(cbind(lapply(d, year), lapply(d, month), lapply(d, day)))
d.df <- dtab1 %>% lapply(date, mdy_hm) %>% tbl_df(cbind(lapply(d, year), lapply(d, month), lapply(d, day)))
d<-lapply(dtab1$date, mdy_hm)
d
d.df <- tbl_df(cbind(lapply(d, year), lapply(d, month), lapply(d, day)))
d.df
occDates<-function(dtab1, dateScale){
require(lubridate)
d.df <- tbl_df(cbind(lapply(d, year), lapply(d, month), lapply(d, day)))
colnames(d.df) <- c("year", "month", "day")
if (dateScale == "year"){
return(unique(dplyr::select(d.df, year)))
}
if (dateScale == "month"){
return(unique(dplyr::select(d.df, year, month)))
}
if (dateScale == "day"){
return(unique(dplyr::select(d.df, year, month, day)))
}
}
uniDates<-occDates(dtab1, dateScale = "year")
uniDates
dateScale<-"year"
#### Load and recognize Dates from files in R
dtab1<-read_csv('/home/pgalante/Projects/Git/WorkingCode/TestData.csv')
colnames(dtab1)<-c('x','y','date')
dtab1<-dtab1 %>%  mutate(date = mdy_hm(date))
## Crop global Wc to smaller area
e<-extent(dtab1)
datedRasterStack<-crop(datedRasterStack, e)
###########
## Pair occs with corresponding env
# datedRasterStack must some how have the dates associated with the layers.
#####  LUBRIDATE WAY  ######
#######  STILL NEED TO FIGURE OUT HOW TO DEFINE UNIQUE MONTH/YEAR/DAY COMBINATIONS
library(lubridate)
dateScale<-"year"
occDates<-function(dtab1, dateScale){
require(lubridate)
d.df <- tbl_df(cbind(lapply(d, year), lapply(d, month), lapply(d, day)))
colnames(d.df) <- c("year", "month", "day")
if (dateScale == "year"){
return(unique(dplyr::select(d.df, year)))
}
if (dateScale == "month"){
return(unique(dplyr::select(d.df, year, month)))
}
if (dateScale == "day"){
return(unique(dplyr::select(d.df, year, month, day)))
}
}
uniDates<-occDates(dtab1, dateScale = "year")
uniDates
str(dtab1)
dtab1
?mutate
?transmute
#### Load and recognize Dates from files in R
dtab1<-read_csv('/home/pgalante/Projects/Git/WorkingCode/TestData.csv')
colnames(dtab1)<-c('x','y','date')
dtab1<-
dtab1 %>%  mutate(date = mdy_hm(date)) %>%
## Crop global Wc to smaller area
e<-extent(dtab1)
dtab1 %>%  mutate(date = mdy_hm(date))
dtab1<-
dtab1 %>%  mutate(date = mdy_hm(date)) %>%
mutate(year, year(date))
dtab1<-
dtab1 %>%  mutate(date = mdy_hm(date)) %>%
print(year(date))
dtab1<-
dtab1 %>%  mutate(date = mdy_hm(date)) %>%
print(year(date))
dtab1<-
dtab1 %>%  mutate(date = mdy_hm(date)) %>%
mutate("year", year(date))
dtab1
dtab1<-
dtab1 %>%  mutate(date = mdy_hm(date))
#### Load and recognize Dates from files in R
dtab1<-read_csv('/home/pgalante/Projects/Git/WorkingCode/TestData.csv')
colnames(dtab1)<-c('x','y','date')
dtab1<-
dtab1 %>%  mutate(date = mdy_hm(date))
dtab1
dtab1<-
dtab1 %>%  mutate(date = mdy_hm(date)) %>%
mutate("year", year(date))
dtab1
#### Load and recognize Dates from files in R
dtab1<-read_csv('/home/pgalante/Projects/Git/WorkingCode/TestData.csv')
colnames(dtab1)<-c('x','y','date')
dtab1
dtab1<-
dtab1 %>%  mutate(date = mdy_hm(date)) %>%
add_column(mutate(year, year(date)))
dtab1
dtab1<-
dtab1 %>%  mutate(date = mdy_hm(date)) %>%
add_column(.,mutate(year, year(date)))
dtab1<-
dtab1 %>%  mutate(date = mdy_hm(date)) %>%
add_column(year, year(date))
dtab1
dtab1<-
dtab1 %>%  mutate(date = mdy_hm(date))
dtab1
%>%
dtab1 %>% add_column(year, year(date))
%>%
dtab1 %>% year(date))
%>%
dtab1 %>% year(date)
dtab1
?year
dtab1
year(dtab1$date)
%>%
dtab1 %>% year(date)
dtab1<-
dtab1 %>%  select(x,y,date) %>% mutate(date = mdy_hm(date)) %>% mutate(years = year(date))
dtab1
#### Load and recognize Dates from files in R
dtab1<-read_csv('/home/pgalante/Projects/Git/WorkingCode/TestData.csv')
colnames(dtab1)<-c('x','y','date')
dtab1<-
dtab1 %>%  select(x,y,date) %>% mutate(date = mdy_hm(date)) %>% mutate(years = year(date))
dtab1
dtab1<-
dtab1 %>%  dplyr::select(x,y,date) %>% mutate(date = mdy_hm(date)) %>% mutate(years = year(date))
dtab1
dtab1 <- dtab1 %>% dplyr::select(x,y,date) %>%
mutate(date = mdy_hm(date)) %>%
mutate(years = year(date)) %>%
mutate(months = month(date)) %>%
mutate(days = day(date))
#### Load and recognize Dates from files in R
dtab1<-read_csv('/home/pgalante/Projects/Git/WorkingCode/TestData.csv')
colnames(dtab1)<-c('x','y','date')
dtab1 <- dtab1 %>% dplyr::select(x,y,date) %>%
mutate(date = mdy_hm(date)) %>%
mutate(years = year(date)) %>%
mutate(months = month(date)) %>%
mutate(days = day(date))
dtab1
dtab2 <- function(dtab1){
dtab1 %>% dplyr::select(x,y,date) %>%
mutate(date = mdy_hm(date)) %>%
mutate(years = year(date)) %>%
mutate(months = month(date)) %>%
mutate(days = day(date))
}
reDate <- function(dtab1){
dtab1 %>% dplyr::select(x,y,date) %>%
mutate(date = mdy_hm(date)) %>%
mutate(years = year(date)) %>%
mutate(months = month(date)) %>%
mutate(days = day(date))
}
dtab2<-reDate(dtab1)
dtab2
#### Load and recognize Dates from files in R
dtab1<-read_csv('/home/pgalante/Projects/Git/WorkingCode/TestData.csv')
colnames(dtab1)<-c('x','y','date')
reDate <- function(dtab1){
dtab1 %>% dplyr::select(x,y,date) %>%
mutate(date = mdy_hm(date)) %>%
mutate(years = year(date)) %>%
mutate(months = month(date)) %>%
mutate(days = day(date))
}
dtab2<-reDate(dtab1)
dtab2
unique(dplyr::select(dtab2, year))
dplyr::select(dtab2, years))
unique(dplyr::select(dtab2, years))
unique(dplyr::select(d.df, years, months))
unique(dplyr::select(dtab2, years, months))
unique(dplyr::select(dtab2, year, month, day))
unique(dplyr::select(dtab2, years, months, days))
occDates<-function(dtab1, dateScale){
require(lubridate)
if (dateScale == "year"){
return(unique(dplyr::select(dtab2, years)))
}
if (dateScale == "month"){
return(unique(dplyr::select(dtab2, years, months)))
}
if (dateScale == "day"){
return(unique(dplyr::select(dtab2, years, months, days)))
}
}
uniDates<-occDates(dtab1, dateScale = "year")
uniDates
class(uniDates)
dtab2 %>% lapply(uniDates, function(x) filter(dtab2, year(dtab2$date)==uniDates[[1]][x]))
dtab2
dtab2 %>% filter(year = 2008)
dtab2 %>% filter(year == 2008)
dtab2 %>% filter(years == 2008)
dtab2 %>% lapply(function (x) filter(years == x))
dtab2 %>% lapply(function (x) filter(years == x))
dtab2 %>% lapply(., function (x) filter(years == x))
dtab3
dtab2 %>% lapply(function (x) filter(years == x))
dtab3 <- dtab2 %>% filter(years == 2009)
dtab3
dtab3 <- dtab2 %>% lapply(filter, years == x)
z<-c(2008, 2009)
dtab3 <- dtab2 %>%
lapply(filter, dtab2$years == z)
lapply(filter, dtab2$years == z)
dtab2$years
lapply(dtab2, function(x) filter(years == z))
dtab2 %>% filter(years == 2009)
dtab2 %>% filter(years == 2008)
dtab2 %>% filter(unique(years))
dtab2 %>% distinct(years)
?pull
dtab2 %>% lapply(dtab2, function(x) filter(distinct(years)))
dtab2 %>% lapply(dtab2, filter(distinct(years)))
dtab2 %>% filter(years == 2008)
dtab2 %>% filter(years == distinct(years))
dtab2 %>% filter(years == distinct(tbl_df(years)))
dtab2 %>% filter(years == distinct(tbl_df(years)))
distinct(tbl_df(years))
years
dtab2 %>% filter(years == distinct(years))
filter(years == distinct(years))
dtab2 %>% filter(years == years)
dtab3 <- dtab2 %>% filter(years == years)
dtab3
years
rm(years)
dtab2 %>% filter(years == years)
dtab3 <- dtab2 %>% filter(years == years)
years
dtab3
years
dtab2 %>% filter(years == unique(years))
dtab2 %>% filter(years == unique(years))
dtab2 %>% distinct(years)
dtab2 %>% unique(years)
dtab2 %>% filter(years == unique(years))
dtab2 %>% filter(years == unique(years))
years
lapply(dtab2, function(x) filter(years == unique(years)[x])
lapply(dtab2, function(x) filter(years == unique(years)[x]))
lapply(dtab2, function(x) filter(years == unique(years)[x]))
lapply(dtab2, function(x) filter(years == distinct(years)[x]))
distinct(years)
distinct(dtab2$years)
unique(dtab2$years)
lapply(dtab2, function(x) filter(years == unique(years)[x]))
dtab2$years
unique(dtab2$years)
unique(dtab2$years)[1]
class(unique(dtab2$years)[1])
lapply(dtab2, function(x) filter(years == unique(as.vector(years)[x])))
dtab2
dtab2 %>% distinct(years)
dtab2 %>% filter(distinct(years))
dtab2 %>% filter(distinct_(years))
dtab2 %>% filter(unique(years))
dtab2 %>% filter(unique(years))
dtab2 %>% filter(years)
dtab2 %>% filter(years)
dtab2 %>% filter()
nrow(distinct(df, x, y))
nrow(distinct(dtab2, x, y))
dtab2 %>% filter(year==2009
)
dtab2 %>% filter(year==2009)
dtab2
filter(year==2009)
dtab2 %>% filter(year == 2009)
dtab2 %>% (years == 2009)
dtab2 %>% filter(years == 2009)
dtab2 %>% filter(years == distinct(years))
distinct(years)
dtab2 %>% distinct(years)
dtab2 %>% distinct(years)
dtab2 %>% filter(years == distinct(years))
distinct(years)
distinct(dtab2$years)
unique(dtab2$years)
length(unique(dtab2$years))
t1
if (dateScale == "year"){
for (i in length(unique(dtab2$years))){
t1[[i]]<-filter(dtab2, years == unique(dtab2$years))
}
}
t1
unique(dtab2$years)
unique(dtab2$years[[i]])
t1<-NULL
for (i in length(unique(dtab2$years))){
t1[[i]]<-filter(dtab2, years == unique(dtab2$years[[i]]))
}
t1
i
t1<-NULL
length(unique(dtab2$years))
dtab2
years
filter(dtab2, years == unique(dtab2$years[[i]]))
i
unique(dtab2$years[[i]])
unique(dtab2$years[[1]])
unique(dtab2$years[[2]])
unique(dtab2$years[[3]])
unique(dtab2$years)
as.vector(unique(dtab2$years))
list(unique(dtab2$years))
as.list(unique(dtab2$years))
t1<-NULL
for (i in length(unique(dtab2$years))){
t1[[i]]<-filter(dtab2, years == as.list(unique(dtab2$years)))
}}
t1<-NULL
for (i in length(unique(dtab2$years))){
t1[[i]]<-filter(dtab2, years == as.list(unique(dtab2$years)))
}
t1
t1<-NULL
for (i in length(unique(dtab2$years))){
t1[[i]]<-filter(dtab2, years == as.list(unique(dtab2$years)[[i]]))
}
t1
as.list(unique(dtab2$years)[[i]]
)
unique(dtab2$years)
as.list(unique(dtab2$years))
as.list(unique(dtab2$years))[[1]]
as.list(unique(dtab2$years))[[2]]
length(unique(dtab2$years))
for (i in length(unique(dtab2$years))){
t1[[i]]<-filter(dtab2, years == as.list(unique(dtab2$years))[[i]])
}
t1
t1<-NULL
for (i in length(unique(dtab2$years))){
t1[[i]]<-filter(dtab2, years == as.list(unique(dtab2$years))[[i]])
}
t1
filter(dtab2, years == as.list(unique(dtab2$years))[[i]])
i
filter(dtab2, years == as.list(unique(dtab2$years))[[1]])
t1<-NULL
for (i in length(unique(dtab2$years))){
t1[i]<-filter(dtab2, years == as.list(unique(dtab2$years))[[i]])
}
t1
t1<-NULL
for (i in length(unique(dtab2$years))){
t1[[i]]<-filter(dtab2, years == as.list(unique(dtab2$years))[[i]])
}
t1
as.list(unique(dtab2$years))[[i]]
i
as.list(unique(dtab2$years))[[1]]
filter(dtab2, years == as.list(unique(dtab2$years))[[1]])
filter(dtab2, years == as.list(unique(dtab2$years))[[2]])
t1<-NULL
for (i in length(unique(dtab2$years))){
t1[[i]]<-filter(dtab2, years == as.list(unique(dtab2$years)))
}
t1
filter(dtab2, years == as.list(unique(dtab2$years))
)
t1<-NULL
for (i in length(unique(dtab2$years))){
t1[[i]]<-filter(dtab2, years == as.list(unique(dtab2$years)))
}
t1
i
t1[[i]]
t1[[1]]
t1[[2]]
t1<-NULL
for (i in length(unique(dtab2$years))){
t1[[i]] <- filter(dtab2, years == as.list(unique(dtab2$years)))
}
t1
unique(dtab2$years)
as.list(unique(dtab2$years))
as.list(unique(dtab2$years))[[1]]
as.list(unique(dtab2$years))[[2]]
t1<-NULL
for (i in length(unique(dtab2$years))){
t1[[i]] = filter(dtab2, years == as.list(unique(dtab2$years))[[i]])
}
t1
t1[[i]]
t1<-NULL
for (i in 1:length(unique(dtab2$years))){
t1[[i]] = filter(dtab2, years == as.list(unique(dtab2$years))[[i]])
}
t1
library(tidyverse)
library(raster)
library(lubridate)
##############Global Wc to crop
datedRasterStack<-stack(list.files(path = '/home/pgalante/Projects/layers/wc2_5', pattern = '\\.tif$', full.names = T))
##############Global Wc to crop
datedRasterStack<-stack(list.files(path = '/home/pgalante/Projects/rasterData/wc2-5', pattern = '\\.tif$', full.names = T))
## Give fake dates  -- for now using 2 years because thats what I have occ data for
years<-c(rep("2008", 10), rep("2009", 10))
for (i in 1:19){
names(datedRasterStack[[i]])<- paste(names(datedRasterStack[[i]]), years[[i]], sep='')
}
#### Load and recognize Dates from files in R
dtab1<-read_csv('/home/pgalante/Projects/Git/WorkingCode/TestData.csv')
dtab1
colnames(dtab1)<-c('x','y','date')
reDate <- function(dtab1){
dtab1 %>% dplyr::select(x,y,date) %>%
mutate(date = mdy_hm(date)) %>%
mutate(years = year(date)) %>%
mutate(months = month(date)) %>%
mutate(days = day(date))
}
dtab2<-reDate(dtab1)
dtab2
## Crop global Wc to smaller area
e<-extent(dtab1)
e
datedRasterStack<-crop(datedRasterStack, e)
###########
## Pair occs with corresponding env
# datedRasterStack must some how have the dates associated with the layers.
#####  LUBRIDATE WAY  ######
#######  STILL NEED TO FIGURE OUT HOW TO DEFINE UNIQUE MONTH/YEAR/DAY COMBINATIONS
library(lubridate)
dateScale<-"year"
occDates<-function(dtab1, dateScale){
require(lubridate)
if (dateScale == "year"){
return(unique(dplyr::select(dtab2, years)))
}
if (dateScale == "month"){
return(unique(dplyr::select(dtab2, years, months)))
}
if (dateScale == "day"){
return(unique(dplyr::select(dtab2, years, months, days)))
}
}
uniDates<-occDates(dtab1, dateScale = "year")
uniDates
class(uniDates)
# Make a list of rasterStacks for each unique year
rasNames <- lapply(uniDates[[1]], function(x) datedRasterStack[[grep(x, names(datedRasterStack))]])
rasNames
# Create different tibbles for each unique dateScale
subOccs <- function(dateScale, dtab1, uniDates){
t1<-NULL
if (dateScale == "year"){
for (i in 1:length(unique(dtab2$years))){
t1[[i]] = filter(dtab2, years == as.list(unique(dtab2$years))[[i]])
}}
#### NEED TO FIGURE OUT YEAR MONTH DAY COMBINATIONS
if (dateScale == "month"){
t1<-NULL
for (i in 1:length(unique(dtab2$years))){
t1[[i]] = filter(dtab2, months == as.list(unique(dtab2$months))[[i]])
}}
if (dateScale == "day"){
t1<-NULL
for (i in 1:length(unique(dtab2$days))){
t1[[i]] = filter(dtab2, days == as.list(unique(dtab2$days))[[i]])
}}
return(t1)
}
test<-subOccs(dateScale = "year", dtab1 = dtab1, uniDates = uniDates)
test
test
e1<-stack(list.files(path = "/home/pgalante/Projects/Git/WorkingCode/olinguitoBio/Full", pattern = "\\.hdr", full.names = T))
e1<-stack(list.files(path = "/home/pgalante/Projects/Git/WorkingCode/olinguitoBio/Full", pattern = "\\.hdr", full.names = T))
e1<-stack(list.files(path = "/home/pgalante/Projects/Git/WorkingCode/olinguitoBio/Full", pattern = "\\.bil", full.names = T))
e1
writeRaster(e1, filename = paste("/home/pgalante/Projects/Git/WorkingCode/olinguitoBio/Full", names(e1),sep='/'), format = "GTiff", bylayer=T)
getwd()
plot(e1[[1]])
writeRaster(e1, filename = paste("/home/pgalante/Projects/Git/WorkingCode/olinguitoBio/Full", names(e1),sep='/'), format = "GTiff", bylayer=T)
